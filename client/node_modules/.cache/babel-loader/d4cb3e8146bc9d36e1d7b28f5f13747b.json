{"ast":null,"code":"var _jsxFileName = \"/home/saadi/coursAlyra/OpiChain/client/src/pages/MarketPlace.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport '../css/page/marketPlace.css';\nimport useEth from \"../contexts/EthContext/useEth\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MarketPlace() {\n  _s();\n  const {\n    state: {\n      web3,\n      accounts,\n      contractOpiChainSurveyNFT,\n      contractMarketPlace\n    }\n  } = useEth();\n  //const [balance, setBalance] = useState('0');\n\n  useEffect(() => {\n    if (contractOpiChainSurveyNFT && contractOpiChainSurveyNFT !== null && contractOpiChainSurveyNFT !== void 0 && contractOpiChainSurveyNFT.methods) {\n      (async function () {\n        let oldEvents = await contractOpiChainSurveyNFT.getPastEvents('surveyCreated', {\n          fromBlock: 0,\n          toBlock: 'latest'\n        });\n        oldEvents.forEach(event => {\n          debugger;\n          if (event.returnValues._ownerSurvey == accounts[0]) {\n            surveysDataLcl.push({\n              '_idSurvey': event.returnValues._idSurvey,\n              '_ownerSurvey': event.returnValues._ownerSurvey\n            });\n          }\n        });\n        for (let [index, s] of surveysDataLcl.entries()) {\n          let survey = await contractOpiChainSurveyNFT.methods.getSurveyById(s._idSurvey).call({\n            from: accounts[0]\n          });\n          s = {\n            ...s,\n            ...survey\n          };\n          surveysDataLclExt.push(s);\n          console.log(s);\n        }\n        setSurveysData(surveysDataLclExt);\n      })();\n    }\n  }, [contractMarketPlace, accounts, refresh]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"marketPlace\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(MarketPlace, \"6V8zscUiog2sJ1m9tPaDQD+gmNs=\", false, function () {\n  return [useEth];\n});\n_c = MarketPlace;\nexport default MarketPlace;\nvar _c;\n$RefreshReg$(_c, \"MarketPlace\");","map":{"version":3,"names":["React","useEth","useState","useEffect","MarketPlace","state","web3","accounts","contractOpiChainSurveyNFT","contractMarketPlace","methods","oldEvents","getPastEvents","fromBlock","toBlock","forEach","event","returnValues","_ownerSurvey","surveysDataLcl","push","_idSurvey","index","s","entries","survey","getSurveyById","call","from","surveysDataLclExt","console","log","setSurveysData","refresh"],"sources":["/home/saadi/coursAlyra/OpiChain/client/src/pages/MarketPlace.jsx"],"sourcesContent":["import * as React from 'react';\nimport '../css/page/marketPlace.css';\nimport useEth from \"../contexts/EthContext/useEth\";\nimport { useState, useEffect } from \"react\";\n\n\nfunction MarketPlace() {\n\n    const { state: { web3, accounts, contractOpiChainSurveyNFT, contractMarketPlace } } = useEth();\n    //const [balance, setBalance] = useState('0');\n              \n    useEffect(() => {\n\n        if (contractOpiChainSurveyNFT && contractOpiChainSurveyNFT?.methods) {\n            (async function () {\n\n                let oldEvents = await contractOpiChainSurveyNFT.getPastEvents('surveyCreated', {\n                    fromBlock: 0,\n                    toBlock: 'latest'\n                });\n\n                oldEvents.forEach(event => {\n                    debugger;\n                    if (event.returnValues._ownerSurvey == accounts[0]) {\n                        surveysDataLcl.push({\n                            '_idSurvey': event.returnValues._idSurvey,\n                            '_ownerSurvey': event.returnValues._ownerSurvey,\n                        });\n\n                    }\n\n                });\n\n                for (let [index, s] of surveysDataLcl.entries()) {\n                    let survey = await contractOpiChainSurveyNFT.methods.getSurveyById(s._idSurvey).call({ from: accounts[0] });\n                    s = { ...s, ...survey };\n                    surveysDataLclExt.push(s);\n                    console.log(s);\n                }\n                setSurveysData(surveysDataLclExt);\n            })();\n        }\n\n    }, [contractMarketPlace, accounts, refresh]);\n\n    return (\n        \n        <div className=\"marketPlace\">\n  \n        </div>\n    );\n}\n\nexport default MarketPlace;"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,6BAA6B;AACpC,OAAOC,MAAM,MAAM,+BAA+B;AAClD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAG5C,SAASC,WAAW,GAAG;EAAA;EAEnB,MAAM;IAAEC,KAAK,EAAE;MAAEC,IAAI;MAAEC,QAAQ;MAAEC,yBAAyB;MAAEC;IAAoB;EAAE,CAAC,GAAGR,MAAM,EAAE;EAC9F;;EAEAE,SAAS,CAAC,MAAM;IAEZ,IAAIK,yBAAyB,IAAIA,yBAAyB,aAAzBA,yBAAyB,eAAzBA,yBAAyB,CAAEE,OAAO,EAAE;MACjE,CAAC,kBAAkB;QAEf,IAAIC,SAAS,GAAG,MAAMH,yBAAyB,CAACI,aAAa,CAAC,eAAe,EAAE;UAC3EC,SAAS,EAAE,CAAC;UACZC,OAAO,EAAE;QACb,CAAC,CAAC;QAEFH,SAAS,CAACI,OAAO,CAACC,KAAK,IAAI;UACvB;UACA,IAAIA,KAAK,CAACC,YAAY,CAACC,YAAY,IAAIX,QAAQ,CAAC,CAAC,CAAC,EAAE;YAChDY,cAAc,CAACC,IAAI,CAAC;cAChB,WAAW,EAAEJ,KAAK,CAACC,YAAY,CAACI,SAAS;cACzC,cAAc,EAAEL,KAAK,CAACC,YAAY,CAACC;YACvC,CAAC,CAAC;UAEN;QAEJ,CAAC,CAAC;QAEF,KAAK,IAAI,CAACI,KAAK,EAAEC,CAAC,CAAC,IAAIJ,cAAc,CAACK,OAAO,EAAE,EAAE;UAC7C,IAAIC,MAAM,GAAG,MAAMjB,yBAAyB,CAACE,OAAO,CAACgB,aAAa,CAACH,CAAC,CAACF,SAAS,CAAC,CAACM,IAAI,CAAC;YAAEC,IAAI,EAAErB,QAAQ,CAAC,CAAC;UAAE,CAAC,CAAC;UAC3GgB,CAAC,GAAG;YAAE,GAAGA,CAAC;YAAE,GAAGE;UAAO,CAAC;UACvBI,iBAAiB,CAACT,IAAI,CAACG,CAAC,CAAC;UACzBO,OAAO,CAACC,GAAG,CAACR,CAAC,CAAC;QAClB;QACAS,cAAc,CAACH,iBAAiB,CAAC;MACrC,CAAC,GAAG;IACR;EAEJ,CAAC,EAAE,CAACpB,mBAAmB,EAAEF,QAAQ,EAAE0B,OAAO,CAAC,CAAC;EAE5C,oBAEI;IAAK,SAAS,EAAC;EAAa;IAAA;IAAA;IAAA;EAAA,QAEtB;AAEd;AAAC,GA7CQ7B,WAAW;EAAA,QAEsEH,MAAM;AAAA;AAAA,KAFvFG,WAAW;AA+CpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}