{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n  if (length > common.param('vm', 'maxInitCodeSize')) {\n    throw new Error(\"the initcode size of this transaction is too large: it is \".concat(length, \" while the max is \").concat(common.param('vm', 'maxInitCodeSize')));\n  }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nvar AccessLists = /** @class */function () {\n  function AccessLists() {}\n  AccessLists.getAccessListData = function (accessList) {\n    var AccessListJSON;\n    var bufferAccessList;\n    if (accessList && (0, types_1.isAccessList)(accessList)) {\n      AccessListJSON = accessList;\n      var newAccessList = [];\n      for (var i = 0; i < accessList.length; i++) {\n        var item = accessList[i];\n        var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\n        var storageItems = [];\n        for (var index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\n        }\n        newAccessList.push([addressBuffer, storageItems]);\n      }\n      bufferAccessList = newAccessList;\n    } else {\n      bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n      // build the JSON\n      var json = [];\n      for (var i = 0; i < bufferAccessList.length; i++) {\n        var data = bufferAccessList[i];\n        var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\n        var storageKeys = [];\n        for (var item = 0; item < data[1].length; item++) {\n          storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\n        }\n        var jsonItem = {\n          address: address,\n          storageKeys: storageKeys\n        };\n        json.push(jsonItem);\n      }\n      AccessListJSON = json;\n    }\n    return {\n      AccessListJSON: AccessListJSON,\n      accessList: bufferAccessList\n    };\n  };\n  AccessLists.verifyAccessList = function (accessList) {\n    for (var key = 0; key < accessList.length; key++) {\n      var accessListItem = accessList[key];\n      var address = accessListItem[0];\n      var storageSlots = accessListItem[1];\n      if (accessListItem[2] !== undefined) {\n        throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n      }\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n      }\n      for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n        }\n      }\n    }\n  };\n  AccessLists.getAccessListJSON = function (accessList) {\n    var accessListJSON = [];\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var JSONItem = {\n        address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\n        storageKeys: []\n      };\n      var storageSlots = item[1];\n      for (var slot = 0; slot < storageSlots.length; slot++) {\n        var storageSlot = storageSlots[slot];\n        JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n      }\n      accessListJSON.push(JSONItem);\n    }\n    return accessListJSON;\n  };\n  AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n    var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n    var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n    var slots = 0;\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var storageSlots = item[1];\n      slots += storageSlots.length;\n    }\n    var addresses = accessList.length;\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n  };\n  return AccessLists;\n}();\nexports.AccessLists = AccessLists;","map":{"version":3,"mappings":"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","names":["checkMaxInitCodeSize","common","length","param","Error","exports","AccessLists","accessList","AccessListJSON","bufferAccessList","newAccessList","i","item","addressBuffer","address","storageItems","index","storageKeys","push","json","data","jsonItem","key","accessListItem","storageSlots","undefined","storageSlot","accessListJSON","JSONItem","toString","slot","accessListStorageKeyCost","accessListAddressCost","slots","addresses"],"sourceRoot":"","sources":["../src/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}